#!/bin/bash

# Content Foundry - Setup File Permissions
# Configura permiss√µes de seguran√ßa para dados sens√≠veis do founder

set -e  # Exit on error

echo "üîê Content Foundry - Configurando Permiss√µes de Seguran√ßa"
echo ""

# ==============================================================================
# FUN√á√ïES AUXILIARES
# ==============================================================================

set_permission() {
    local file=$1
    local perm=$2
    local desc=$3

    if [ -e "$file" ]; then
        chmod "$perm" "$file"
        echo "‚úÖ $desc: $file ‚Üí $perm"
    else
        echo "‚ö†Ô∏è  Arquivo n√£o existe (ser√° criado depois): $file"
    fi
}

# ==============================================================================
# PERMISS√ïES DE ARQUIVOS SENS√çVEIS
# ==============================================================================

echo "üìÑ Configurando permiss√µes de arquivos sens√≠veis..."
echo ""

# C√©rebro Digital (CR√çTICO - apenas owner read/write)
set_permission "docs/brain.md" "600" "C√©rebro Digital"

# Journal de insights (SENS√çVEL - apenas owner)
set_permission "docs/insights-journal.md" "600" "Insights Journal"

# Calend√°rio editorial (PRIVADO - apenas owner)
set_permission "docs/calendar.md" "600" "Calend√°rio Editorial"

# Roadmap personalizado (PRIVADO - apenas owner)
set_permission "docs/roadmap.md" "600" "Roadmap"

echo ""

# ==============================================================================
# PERMISS√ïES DE DIRET√ìRIOS
# ==============================================================================

echo "üìÇ Configurando permiss√µes de diret√≥rios..."
echo ""

# .foundry/ - apenas owner access (logs, backups, state)
if [ -d ".foundry" ]; then
    chmod 700 .foundry
    echo "‚úÖ Runtime State: .foundry/ ‚Üí 700"

    # Subpastas tamb√©m
    for dir in .foundry/*/; do
        if [ -d "$dir" ]; then
            chmod 700 "$dir"
            echo "   ‚îú‚îÄ ${dir} ‚Üí 700"
        fi
    done
fi

# docs/content/ - owner + group read (conte√∫dos podem ser compartilhados)
if [ -d "docs/content" ]; then
    chmod 750 docs/content
    echo "‚úÖ Conte√∫dos Gerados: docs/content/ ‚Üí 750"
fi

echo ""

# ==============================================================================
# VALIDA√á√ÉO
# ==============================================================================

echo "üîç Validando configura√ß√µes..."
echo ""

validate_permission() {
    local file=$1
    local expected=$2

    if [ -e "$file" ]; then
        actual=$(stat -f "%OLp" "$file" 2>/dev/null || stat -c "%a" "$file" 2>/dev/null)
        if [ "$actual" = "$expected" ]; then
            echo "‚úÖ $file: $actual (correto)"
        else
            echo "‚ùå $file: $actual (esperado: $expected)"
        fi
    fi
}

# Validar arquivos cr√≠ticos
validate_permission "docs/brain.md" "600"
validate_permission "docs/insights-journal.md" "600"
validate_permission ".foundry" "700"

echo ""

# ==============================================================================
# INSTRU√á√ïES P√ìS-SETUP
# ==============================================================================

echo "‚úÖ Permiss√µes configuradas com sucesso!"
echo ""
echo "üìã Pr√≥ximos passos:"
echo "   1. Criar docs/brain.md durante onboarding"
echo "   2. Executar novamente este script ap√≥s criar brain.md"
echo "   3. Verificar com: ls -la docs/"
echo ""
echo "‚ö†Ô∏è  IMPORTANTE:"
echo "   - brain.md cont√©m dados MUITO SENS√çVEIS"
echo "   - Nunca compartilhar esta pasta sem remover brain.md"
echo "   - Para backup: use servi√ßo criptografado"
echo ""
echo "üîí Seguran√ßa verificada! Framework protegido."
